"use client";

import { useState, useEffect } from "react";
import React from 'react';
import Link from "next/link";

// export const metadata = {
//   title: 'Next.js',
//   description: 'Generated by Next.js',
// }

function MapLoadingScreen({ onComplete }: { onComplete: () => void }) {
  const [progress, setProgress] = useState(0);
  const [morphToCircle, setMorphToCircle] = useState(false);
  const [expandCircle, setExpandCircle] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const LOADING_DURATION = 4000; // 4 seconds, adjust as needed

  useEffect(() => {
    const steps = 100;
    const intervalTime = LOADING_DURATION / steps;
    const interval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval);
          return 100;
        }
        const easeOutQuart = 1 - Math.pow(1 - (prev / 100), 4);
        return Math.min(prev + (1 + easeOutQuart * 0.5), 100);
      });
    }, intervalTime);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (progress >= 100) {
      setTimeout(() => {
        setMorphToCircle(true);
        setTimeout(() => {
          setExpandCircle(true);
          setTimeout(() => {
            setIsLoading(false);
            onComplete();
          }, 700);
        }, 600);
      }, 300);
    }
  }, [progress, onComplete]);

  if (!isLoading) return null;

  return (
    <div className="fixed inset-0 z-50 bg-white flex items-center justify-center overflow-hidden">
      {/* Map themed background */}
      <div className="absolute inset-0 opacity-10 pointer-events-none select-none">
        <svg className="w-full h-full" viewBox="0 0 800 600" fill="none">
          <rect width="800" height="600" fill="#e0f2fe" />
          <path d="M0 400 Q200 350 400 400 T800 400" stroke="#38bdf8" strokeWidth="8" fill="none" />
          <circle cx="200" cy="300" r="40" fill="#0ea5e9" opacity="0.2" />
          <circle cx="600" cy="200" r="30" fill="#1e40af" opacity="0.15" />
          <rect x="300" y="100" width="200" height="40" rx="20" fill="#0ea5e9" opacity="0.08" />
        </svg>
      </div>
      {/* Map icon and title */}
      <div className="relative z-10 flex flex-col items-center space-y-8">
        <div className="flex flex-col items-center">
          <div className="mb-4">
            <div className="w-16 h-16 mx-auto bg-gradient-to-br from-sky-400 to-blue-800 rounded-2xl flex items-center justify-center shadow-lg">
              <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A2 2 0 013 15.382V6.618a2 2 0 011.105-1.789l6-3a2 2 0 011.79 0l6 3A2 2 0 0121 6.618v8.764a2 2 0 01-1.105 1.789L15 20" />
                <circle cx="12" cy="10" r="3" />
              </svg>
            </div>
          </div>
          <h1 className="text-3xl font-bold text-blue-900 mb-2 bg-gradient-to-r from-sky-500 via-blue-700 to-blue-900 bg-clip-text text-transparent">
            Africa AI Readiness Map
          </h1>
          <p className="text-blue-700 text-sm">Loading interactive map experience...</p>
        </div>
        {/* Morphing Bar/Circle Animation */}
        <div className="flex items-center justify-center" style={{ minHeight: 48 }}>
          <div
            style={
              morphToCircle
                ? {
                    width: 48,
                    height: 48,
                    borderRadius: 24,
                    background: "linear-gradient(90deg, #0ea5e9 0%, #1e40af 100%)",
                    boxShadow: "0 4px 32px 0 rgba(30,64,175,0.15)",
                    transition: 'all 0.6s cubic-bezier(0.4,0,0.2,1)'
                  }
                : {
                    width: 320,
                    height: 12,
                    borderRadius: 6,
                    background: "linear-gradient(90deg, #0ea5e9 0%, #1e40af 100%)",
                    boxShadow: "0 2px 16px 0 rgba(30,64,175,0.10)",
                    transition: 'all 0.8s cubic-bezier(0.4,0,0.2,1)'
                  }
            }
            className="overflow-hidden flex items-center justify-start relative"
          >
            {!morphToCircle && (
              <div
                className="h-full rounded-full"
                style={{
                  background: "linear-gradient(90deg, #38bdf8 0%, #1e40af 100%)",
                  width: `${progress}%`,
                  transition: 'width 0.15s cubic-bezier(0.4,0,0.2,1)'
                }}
              />
            )}
          </div>
        </div>
      </div>
      {/* Expanding Circle Overlay */}
      {expandCircle && (
        <div
          className="fixed left-1/2 top-1/2"
          style={{
            zIndex: 60,
            borderRadius: "50%",
            width: 48,
            height: 48,
            background: "linear-gradient(90deg, #0ea5e9 0%, #1e40af 100%)",
            transform: 'translate(-50%, -50%) scale(40)',
            transition: 'transform 0.7s cubic-bezier(0.4,0,0.2,1)'
          }}
        />
      )}
    </div>
  );
}

function MapHeader() {
  const [showHome, setShowHome] = React.useState(true);

  React.useEffect(() => {
    const handleScroll = () => {
      setShowHome(window.scrollY < 50);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <>
      {/* Floating Home Button (disappears on scroll) */}
      {showHome && (
        <a href="/" className="fixed top-6 left-6 z-50 bg-white/90 shadow-lg rounded-full p-3 hover:bg-cyan-100 transition-colors group">
          <svg
            className="h-7 w-7 text-blue-700 group-hover:text-cyan-600 transition-colors"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M3 11.5L12 5l9 6.5V19a2 2 0 01-2 2h-3.5a.5.5 0 01-.5-.5V15a1 1 0 00-1-1h-2a1 1 0 00-1 1v5.5a.5.5 0 01-.5.5H5a2 2 0 01-2-2v-7.5z"
            />
          </svg>
        </a>
      )}
      {/* Centered Floating Card Header */}
      <div className="w-full flex justify-center mt-6">
        <div className="backdrop-blur-md bg-white/90 shadow-lg rounded-2xl px-8 py-4 flex flex-col items-center max-w-2xl w-full mx-2">
          <h1 className="text-2xl font-bold text-blue-900 text-center">Africa AI Readiness Map</h1>
          <p className="text-sm text-blue-700/80 font-light mt-1 text-center">
            Explore artificial intelligence preparedness across African nations
          </p>
        </div>
      </div>
    </>
  );
}

export default function MapLayout({ children }: { children: React.ReactNode }) {
  const [showContent, setShowContent] = useState(false);
  const [hasChecked, setHasChecked] = useState(false);

  useEffect(() => {
    if (typeof window !== "undefined") {
      const alreadyLoaded = sessionStorage.getItem("mapPageLoadedOnce");
      if (!alreadyLoaded) {
        setShowContent(false);
      } else {
        setShowContent(true);
      }
      setHasChecked(true);
    }
  }, []);

  const handleLoadingComplete = () => {
    setShowContent(true);
    if (typeof window !== "undefined") {
      sessionStorage.setItem("mapPageLoadedOnce", "true");
    }
  };

  if (!hasChecked) return null;

  return (
    <>
      {!showContent && <MapLoadingScreen onComplete={handleLoadingComplete} />}
      {showContent && (
        <>
          <MapHeader />
          {children}
        </>
      )}
    </>
  );
}